# https://docs.pytest.org/en/7.1.x/example/parametrize.html#paramexamples
# python -m pytest test_time.py -v
# python -m pytest test_time.py --collect-only
from datetime import datetime, timedelta

import pytest

# These can be easily read from an external csv file
testdata = [
    (datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1)),
    (datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1)),
]

# we let pytest generate the test IDs.
@pytest.mark.parametrize("a,b,expected", testdata)
def test_timedistance_v0(a, b, expected):
    diff = a - b
    assert diff == expected

# we specified ids as a list of strings which were used as the test IDs. These are succinct, but can be a pain to maintain.
@pytest.mark.parametrize("a,b,expected", testdata, ids=["forward", "backward"])
def test_timedistance_v1(a, b, expected):
    diff = a - b
    assert diff == expected


def idfn(val):
    if isinstance(val, (datetime,)):
        # note this wouldn't show any hours/minutes/seconds
        return val.strftime("%Y%m%d")

# we specified ids as a function that can generate a string representation to make part of the test ID. 
# So our datetime values use the label generated by idfn
@pytest.mark.parametrize("a,b,expected", testdata, ids=idfn)
def test_timedistance_v2(a, b, expected):
    diff = a - b
    assert diff == expected

# we used pytest.param to specify the test IDs together with the actual data, instead of listing them separately.
@pytest.mark.parametrize(
    "a,b,expected",
    [
        pytest.param(
            datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1), id="forward"
        ),
        pytest.param(
            datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1), id="backward"
        ),
    ],
)
def test_timedistance_v3(a, b, expected):
    diff = a - b
    assert diff == expected